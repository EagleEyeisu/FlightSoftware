/*                        EAGLE EYE PROPRIETARY INFORMATION                          *
 *                                                                                   *
 * Purpose: Primary software for use on EAGLE EYE rotor craft. Controls and          *
 *          maintains motor speed, deploys parachute, reads and records atmospheric  *
 *          data.                                                                    *
 *                                                                                   *
 * Date:      Version:        Developer:                    Description:             *     
 * 10/17/16   1.0             Jared Danner/Wesley Carleton  Initial Build.           *                                                                                      
 * 11/16/16   1.1             Jared Danner                  Included Saftey ShutOff  *
 * 12/05/16   1.2             James/Wesley/Jared            Changed ESC Communication*
 */

/********************General Over View***************************
 * The approach we took was to use the ESC exactly the same as  *
 * if we were using an actual servo motor and not a brushless   *
 * motor. This means we sent it angle degrees between 0 and 180.*
 ****************************************************************/
#include <Servo.h> 

//5% = 940
//10% = 990
//15% = 1040
//20% = 1090
//25% = 1140
//30% = 1190
//35% = 1240
//40% = 1290
//45% = 1340
//50% = 1390

#define MAX_SIGNAL 1190     //Change to desired max power. Percentages given right above
#define MIN_SIGNAL 700      //Dont't touch
#define MOTOR_PIN 9         //Don't touch unless switching to MEGA than change to 53

#define INCREMENT_AMOUNT 10    //Don't touch
#define START_DELAY 7000       //Don't touch
#define INCREMENT_DELAY 320    //Don't touch
#define FULL_POWER_DELAY 4000  //Changes how long you want to the motor to stay at a contant rate once you are at full power

Servo motor; //Creates an Servo object

/*
 * Function used during the setup process  
 * to attach the ESC to the appropriate pin 
 * number on the Arduino
 */
void setup() {
  motor.attach(MOTOR_PIN);  //Adds ESC to certain pin. arm();
  Serial.begin(9600);       //Starts the output to the serial monitor.
}

/********************Main Program****************************
 * The program's core begins below where it sets the speed  *                       
 * of the ESC to 0% throttle. It than proceeds to increment *
 * the throttle up until it achieves 70% throttle. When     *
 * completed, the program than slowly increments the        *
 * throttle power sent to the ESC/motor back to 0.          *
 ************************************************************/
void loop(){
  int speed;                    //Creates speed variable.
  motor.writeMicroseconds(700); //Begins program by sending what is eqivalent to 0% throttle.

  Serial.print("STARTING IN: ");
  Serial.println(START_DELAY/1000); //Prints out how message stating how long until program begins.
  delay(START_DELAY);               //Delays program long enough for ESC to initalize.
  
  char killSwitch = 'k';   //Predefined character to intiate program shutdown.
  boolean shutOff = false; //True or false value that is triggered when the appropriate character is entered.
  char inputSignal;        //Used to hold character for shut down.
  int maxSpeedReached;     //Maximum speed reached during throttle up.
  
  inputSignal = Serial.read();                 //Reads input.
  if(inputSignal!=killSwitch){                 //Checks to see if shut down signal has been given.
    for(speed=MIN_SIGNAL;speed<=MAX_SIGNAL;speed+=INCREMENT_AMOUNT){   //Cycles speed up to chosen power percentage with appropriate time delay.
      inputSignal = Serial.read();             //Reads in user input if given.
      if(inputSignal==killSwitch){             //If correct input is given 'k' program starts to shut down.
        shutOff = true;                        //Shut off value is set true.
        break;                                 //Breaks throttle up loop.
      }
      motor.writeMicroseconds(speed);          //Calls function setSpeed (above) and passes the variable speed to it.
      Serial.println(speed);                   //Prints speed variable to the serial monitor.
      delay(INCREMENT_DELAY);                  //Delays the program for one fifth of a second.
    }
    
    if(!shutOff){                              //Checks to see if shut down signal has been given.
      delay(FULL_POWER_DELAY);                 //Holds at full power for 4 seconds. If shut down signal is not given.
    }
    
    maxSpeedReached = speed;                   //Assigns maximum speed reached during throttle up;
    for(speed=maxSpeedReached;speed>=MIN_SIGNAL;speed-=INCREMENT_AMOUNT){  //Cycles speed down to 0% power with appropriate time delay.
      motor.writeMicroseconds(speed);                        //Calls function setSpeed (above) and passes the variable speed to it.
      Serial.println(speed);                                 //Prints speed variable to the serial monitor.
      delay(INCREMENT_DELAY);                                //Delays the program for one fifth of a second.
    }
  }
  Serial.println("PROGRAM COMPLETE"); //Signals the end of the program.
  delay(10000000);                    //Delays program for a long time until the loop() starts over again.
}
