/*******************************EAGLE EYE PROPRIETARY INFORMATION***************************************
 *                                                                                                     *
 *Purpose: Primary software for use on LoRa Transmiter. Handles incoming/outgoing radio signals,       *
 *                 stores and transmits GPS location of craft, works as backup parachute deployment    *
 *                 and becomes the crafts HQ if the mega were to fail.                                 *
 *                                                                                                     *
 *Date:      Version:        Developer:        Description:                                            *
 *2/9/17     1.0             Jared Danner      Initial Build.                                          *
 *******************************************************************************************************/

//LIBRARIES
/****ALTITUDE****/
#include <SD.h>
#include <Adafruit_GPS.h>
#include <SoftwareSerial.h>

/****FLIGHT******/
#include <Wire.h>

//CONSTANT VARIABLES
/****PINS********/
#define RELAY1  28    //Parachute Digital Pin to IN1

/****SD CARD*****/
File EagleEyeData;    //File used to store the flight data. Data will be written/saved to this file during flight operations
#define SD_PIN = 10;  //CHANGE THIS TO MEGA OR FEATHER 

/****PARACHUTE***/
boolean chute_enable = false;       //Status of chute readiness.
boolean chute_deploy = false;       //Status of chute deployment.
int saftey_counter = 0;             //Saftey counter.
int PARACHUTE_ARM_HEIGHT = 9144;    //9144 m == 30,000 feet
int PARACHUTE_DEPLOY_HEIGHT = 6096;  //6096m == 20,000 feet

/****COMMUNICATION****/
boolean HABET_Connection = true; //Status for Connection to HABET.
byte IN[] = {B0000,B0001,B0010,B0011,B0100,B0101,B0110,B0111,B1000,B1001}; //Event Log from LoRa.
boolean DISPATCH_SIGNAL = true;
String NMEA1;                  //Variable for first NMEA sentence.
String NMEA2;                  //Variable for second NMEA sentence.
char c;                        //To read characters coming from the GPS.
SoftwareSerial mySerial(3,2);  //NEED TO UPDATE WIRES FOR MEGA.
Adafruit_GPS GPS(&mySerial);   //Create the GPS Object.

/****COMMAND****/
boolean COMMAND_CENTER = false;
boolean no_Response = false;

/*
 * Holds data values of Pressure, Altitude, and Temperature
 */
struct flight_data{
  float altitude;
};

void setup(){
  Serial.begin(115200);

  /****Parachute deployment Initialize****/
  //Set all the pins low so they do not toggle on Reset or Power on!
  digitalWrite(RELAY1, HIGH);  //Sends a LOW signal
  pinMode(RELAY1, OUTPUT);     //Sets RELAY1 as output pin.
  Serial.println("Parachute Online.");

  /****Initialize GPS Module****/
  GPS.begin(9600);
  GPS.sendCommand("$PGCMD,33,0*6D");            //Turn off antenna update nuisance data
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA); //Request RMC and GGA Sentences only
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);    //Set update rate to 1 hz
  
  /****Initialize SD Card reader****/
  Serial.println("SD Card Online.");
  pinMode(SD_PIN, OUTPUT);

  /****Initialize I2C Comms****/
  Wire.begin(2);    //Setting the address for this board.
  Serial.println("Comms Address Set.\n\n");
}

void loop() {
  flight_data current = GPSData();                                //Updates altitude using GPS.
  RADIO_Comm();                                                   //Habet communication.
  MEGA_Comm(current.altitude,DISPATCH_SIGNAL,0);                  //Sends Events to Mega & Logs Events.
  storeData(current.altitude);                                    //Stores Data to SD Card.
  parachute(current.altitude);                                    
}

/*
 * Radio Communication into and out of the LoRa.
 */
void RADIO_Comm(){
  
}
/*
 * Handles all parachute functions.
 */
void parachute(float Altitude){
  if(!chute_enable && Altitude >= PARACHUTE_ARM_HEIGHT){    //9144 m == 30,000 feet
    EagleEyeData = SD.open("FltData.txt", FILE_WRITE);
    saftey_counter++;
    if(saftey_counter >= 4){
      chute_enable = true;
      Serial.print("Chute enabled at ");  
      Serial.println(Altitude);
      EagleEyeData.print("Chute enabled at: ");
      EagleEyeData.println(Altitude); 
    }
    else if(Altitude <= PARACHUTE_ARM_HEIGHT){  //Resets saftey counter to 0
      saftey_counter = 0;
      Serial.println("Saftey reset to 0.");
      EagleEyeData.println("Saftey reset to 0.");  
    }
  }
  if(!chute_deploy && chute_enable && Altitude <= PARACHUTE_DEPLOY_HEIGHT){  //6096m == 20,000 feet
    digitalWrite(RELAY1, LOW);                //This is close the circuit providing power the chute deployment system
    chute_deploy = true;
    Serial.print("Chute deployed at: ");
    Serial.println(Altitude);
    delay(2000);
    digitalWrite(RELAY1, HIGH);               //Run the current for 2 seconds, then open the circuit and stop the current
    EagleEyeData.print("Chute deployed at: ");
    EagleEyeData.println(Altitude);
  }
  EagleEyeData.close();
}

/*
 * Responsible for updating and recieving information directly from GPS.
 */
struct flight_data GPSData(){
  clearGPS();
  while(!GPS.newNMEAreceived()) {       //Loop until you have a good NMEA sentence
    c=GPS.read();
  }
  NMEA1=GPS.lastNMEA();
  while(!GPS.newNMEAreceived()) {       //Loop until you have a good NMEA sentence
    c=GPS.read();
  }
  NMEA2=GPS.lastNMEA();
  
  float Alt;
  if(NMEA1[3]=='G'){
    Alt = parse_GPS(NMEA1);
  }
  else if(NMEA2[3]=='G'){
    Alt = parse_GPS(NMEA2);
  }
  flight_data data;
  data.altitude = Alt;
  return data;
}

/*
 * Parses GPS strings to find altitude.
 */
float parse_GPS(String NMEA){
  int T_GoalNumber = 9;   //9th comma in the NMEA sentense signals the beginning of the altitude value.
  boolean T_Goal = false;
  int C = 0;
  String two = "                   ";
  int t = 0;
  for(int i=0;i<120;i++){
    if(NMEA[i]==','){
      C++;
    }
    else if(C==T_GoalNumber){
      if(NMEA[i]!=','){
        two[t] = NMEA[i];
        t++;
      }
    }
  }
  char arr[20];
  for(int i=0;i<20;i++){
    arr[i]=two[i];
  }
  float temp_Alt = atof(arr);
  Serial.println(temp_Alt);
  return temp_Alt;
}

/*
 * Submethod used to clear the GPS's data to make way for new data.
 */
void clearGPS(){
  while(!GPS.newNMEAreceived()) {   //Loop until you have a good NMEA sentence
    c=GPS.read();
  }
  while(!GPS.newNMEAreceived()) {   //Loop until you have a good NMEA sentence
    c=GPS.read();
  }
  while(!GPS.newNMEAreceived()) {   //Loop until you have a good NMEA sentence
    c=GPS.read();
  }
}

/*
 * Used to store Data to SD card storage
 */
void storeData(float Altitude){
  //Stores GPS data
  EagleEyeData = SD.open("NMEA.txt", FILE_WRITE);
  EagleEyeData.println(NMEA1);
  EagleEyeData.println(NMEA2);
  EagleEyeData.close();
  //Stores Altitude data
  EagleEyeData = SD.open("Flight.txt", FILE_WRITE);
  EagleEyeData.print("ALT: ");
  EagleEyeData.println(Altitude);
  EagleEyeData.close();
}

/**
 * Handles Event Logging. Sends MEGA milestone updates/errors.
 *  LORA EVENTS
 *  0 - Chute Disabled
 *  1 - Chute Enabled
 *  2 - Chute Deployed
 *  3 - GPS Offline
 *  4 - Detached
 *  5 - Abort Detach
 *  6 - Radio Connection Lost
 */
void MEGA_Comm(float Altitude, boolean Send, int LoRa_Event){
  EagleEyeData = SD.open("EventLog.txt", FILE_WRITE);
  if(Send){
    Wire.beginTransmission(1);
    //Serial.println("Event sent to Mega");
    Wire.write(IN[LoRa_Event]);
    Wire.endTransmission();
    EagleEyeData.print(IN[LoRa_Event]);
    EagleEyeData.print(" <-Sent to Mega at ALT: ");
  }
  else{
    EagleEyeData.print(IN[LoRa_Event]);
    EagleEyeData.print(" <-Event Logged at ALT: ");
  }
  EagleEyeData.print(Altitude);
  EagleEyeData.print(" at flight TIME: ");
  EagleEyeData.close();
}
